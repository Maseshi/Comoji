// __multiversion__
// This signals the loading code to prepend either #version 100 or #version 300 es as apropriate.

#include "assets/h/vertexVersionCentroid.h"

#if __VERSION__ >= 300
	#ifndef BYPASS_PIXEL_SHADER
		_centroid out vec2 uv0;
		_centroid out vec2 uv1;
	#endif
#else
	#ifndef BYPASS_PIXEL_SHADER
		varying vec2 uv0;
		varying vec2 uv1;
	#endif
#endif

#ifndef BYPASS_PIXEL_SHADER
	varying vec4 color;
#endif

#ifdef FOG
	varying vec4 fogColor;
#endif

#ifdef NEAR_WATER
	varying float cameraDist;
#endif

varying vec3 screen_pos;

#include "assets/h/uniformWorldConstants.h"
#include "assets/h/uniformPerFrameConstants.h"
#include "assets/h/uniformShaderConstants.h"
#include "assets/h/uniformRenderChunkConstants.h"
#include "assets/h/waves.h"

uniform highp float TOTAL_REAL_WORLD_TIME;

attribute POS4 POSITION;
attribute vec4 COLOR;
attribute vec2 TEXCOORD_0;
attribute vec2 TEXCOORD_1;

const float rA = 1.0;
const float rB = 1.0;
const vec3 UNIT_Y = vec3(0, 1, 0);
const float DIST_DESATURATION = 56.0 / 255.0;

vec4 rgb2hsv(vec4 rgb) {
    highp float rgbMax = max(rgb.r, max(rgb.g, rgb.b));
    highp float rgbMin = min(rgb.r, min(rgb.g, rgb.b));
    highp float h = 0.0;
    highp float s = 0.0;
    highp float v = rgbMax;
    highp float delta  = rgbMax - rgbMin;
    if (delta != 0.0) {
        if (rgbMax == rgb.r) {
            h = (rgb.g - rgb.b) / delta;
        } else if (rgbMax == rgb.g) {
            h = 2.0 + (rgb.b - rgb.r) / delta;
        } else {
            h = 4.0 + (rgb.r - rgb.g) / delta;
        }
    }
    h *= 60.0;
    h  = h < 0.0 ? h + 360.0 : h;
    if (rgbMax != 0.0) {
        s = delta / rgbMax;
    }
    return vec4(h, s, v, rgb.a);
}

bool isWater(vec4 color) {
    vec4 hsv = rgb2hsv(color);
    return hsv.x >= 120.0 && hsv.x <= 270.0;
}

void main()
{
    POS4 worldPos;
	#ifdef AS_ENTITY_RENDERER
		POS4 pos = WORLDVIEWPROJ * POSITION;
		worldPos = pos;
	#else
		worldPos.xyz = (POSITION.xyz * CHUNK_ORIGIN_AND_SCALE.w) + CHUNK_ORIGIN_AND_SCALE.xyz;
		worldPos.w = 1.0;

		POS4 pos = WORLDVIEW * worldPos;
		pos = PROJ * pos;
	#endif

	gl_Position = pos;
	screen_pos.xy = pos.xy / (pos.z + 1.0);
	screen_pos.z = pos.z;

	#ifndef BYPASS_PIXEL_SHADER
		uv0 = TEXCOORD_0;
		uv1 = TEXCOORD_1;
		color = COLOR;
	#endif

	///// Find distance from the camera

	#if defined(FOG) || defined(BLEND)
		#ifdef FANCY
			vec3 relPos = -worldPos.xyz;
			float cameraDepth = length(relPos);
		#else
			float cameraDepth = pos.z;
		#endif
	#endif

	///// Apply fog

	#ifdef FOG
		float len = cameraDepth / RENDER_DISTANCE;
		#ifdef ALLOW_FADE
			len += RENDER_CHUNK_FOG_ALPHA;
		#endif

		fogColor.rgb = FOG_COLOR.rgb;
		fogColor.a = clamp((len - FOG_CONTROL.x) / (FOG_CONTROL.y - FOG_CONTROL.x), 0.0, 1.0);
	#endif

	///// WAVES Template

	#if defined ALPHA_TEST && defined(LEAVES_WAVES)
		if (color.g > color.b) {
			POS3 l = POSITION.xyz;
			gl_Position.s += sin(TOTAL_REAL_WORLD_TIME * 1.8 + 1.7 * l.x + 1.6 * l.z + l.y) * 0.018;
		}
	#endif
		#if !defined(BYPASS_PIXEL_SHADER) && defined(WATER_WAVES)
			if (isWater(color)) {
				POS3 l = worldPos.xyz + VIEW_POS;
				gl_Position.t += sin(TOTAL_REAL_WORLD_TIME * 1.8 + 0.9 * l.x + 0.9 * l.z + l.y) * 0.095 * fract(POSITION.y);
			}
	#endif

	///// Water Magic

	#ifdef NEAR_WATER
		#ifdef FANCY
			float F = dot(normalize(relPos), UNIT_Y);
			F = 1.0 - max(F, 0.1);
			F = 1.0 - mix(F * F * F * F, 1.0, float(min(1.0, cameraDepth / FAR_CHUNKS_DISTANCE)));

			color.rg -= vec2(F * DIST_DESATURATION);

			vec4 depthColor = vec4(color.rgb * 0.75, 0.000099);
			vec4 traspColor = vec4(color.rgb * 0.85, 0.000099);
			vec4 surfColor = vec4(color.rgb, 0.75);

			vec4 nearColor = mix(traspColor, depthColor, color.a);
			color = mix(surfColor, nearColor, F);
		#else
			vec4 surfColor = vec4(color.rgb, 1.0);
			color = surfColor;
			color.a = pos.z / FAR_CHUNKS_DISTANCE + 0.5;
		#endif
	#endif

	///// Blended layer (mostly water) magic

	#ifdef BLEND
		bool shouldBecomeOpaqueInTheDistance = color.a < 0.95;
		if (shouldBecomeOpaqueInTheDistance) {
			#ifdef FANCY
				float cameraDist = cameraDepth / FAR_CHUNKS_DISTANCE;
				color = COLOR;
			#else
				vec4 surfColor = vec4(color.rgb, 1.0);
				color = surfColor;
					
				vec3 relPos = -worldPos.xyz;
				float camDist = length(relPos);
				float cameraDist = camDist / FAR_CHUNKS_DISTANCE;
			#endif
			
			float alphaFadeOut = clamp(cameraDist, 0.0, 1.0);
			color.a = mix(color.a, 1.0, alphaFadeOut);
		}
	#endif

	#ifndef BYPASS_PIXEL_SHADER
		#ifndef FOG
			color.rgb += FOG_COLOR.rgb * 0.000001;
		#endif
	#endif
}